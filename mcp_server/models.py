# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T11:54:32+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field


class Client(BaseModel):
    document: str
    email: str
    id: str


class ClientProfile(BaseModel):
    birthDate: str
    document: str
    documentType: str
    email: str
    firstName: str
    isCorporate: bool
    lastName: str
    phone: str


class CreateGiftCardCancellationTransactionRequest(BaseModel):
    requestId: str
    value: float


class CreateGiftCardinGiftCardProviderRequest(BaseModel):
    caption: str
    emissionDate: str
    expiringDate: str
    multipleCredits: bool
    multipleRedemptions: bool
    profileId: str
    relationName: str
    restrictedToOwner: bool


class CreateUpdateGiftCardProviderbyIDRequest(BaseModel):
    appKey: Optional[str] = Field(
        None,
        description='Credential provided by the merchant that VTEX will use for identification',
    )
    appToken: Optional[str] = Field(
        None,
        description='Credential provided by the merchant that VTEX will use for identification',
    )
    cancelEnabled: bool = Field(
        ...,
        description='It says if it is possible to cancel the transaction, generated through the provider',
    )
    oauthProvider: str = Field(..., description="Provider's authentication")
    preAuthEnabled: bool = Field(
        ...,
        description='Related to the pre-authorization that can happen on the transaction generated through the provider',
    )
    serviceUrl: str = Field(..., description='URL from the provider')


class Item(BaseModel):
    id: str
    name: str
    price: int
    productId: str
    quantity: int
    refId: str


class Item1(BaseModel):
    discount: int
    id: str
    name: str
    price: int
    priceTags: List[str] = Field(..., description='')
    productId: str
    quantity: int
    refId: str
    shippingDiscount: int
    value: int


class Shipping(BaseModel):
    city: str
    complement: str
    country: str
    neighborhood: str
    number: str
    postalCode: str
    receiverName: str
    reference: str
    state: str
    street: str


class GiftcardprovidersGetResponse(BaseModel):
    pass


class GiftcardprovidersGiftCardProviderIDDeleteResponse(BaseModel):
    pass


class GiftcardprovidersGiftCardProviderIDPutResponse(BaseModel):
    pass


class GiftcardprovidersGiftCardProviderIDGiftcardsPostResponse(BaseModel):
    pass


class GiftcardprovidersGiftCardProviderIDGiftcardsSearchPostResponse(BaseModel):
    pass


class GiftcardprovidersGiftCardProviderIDGiftcardsGiftCardIDGetResponse(BaseModel):
    pass


class GiftcardprovidersGiftCardProviderIDGiftcardsGiftCardIDTransactionsGetResponse(
    BaseModel
):
    pass


class GiftcardprovidersGiftCardProviderIDGiftcardsGiftCardIDTransactionsPostResponse(
    BaseModel
):
    pass


class GiftcardprovidersGiftCardProviderIDGiftcardsGiftCardIDTransactionsTIdCancellationsGetResponse(
    BaseModel
):
    pass


class GiftcardprovidersGiftCardProviderIDGiftcardsGiftCardIDTransactionsTIdCancellationsPostResponse(
    BaseModel
):
    pass


class GiftcardprovidersGiftCardProviderIDGiftcardsGiftCardIDTransactionsTIdSettlementsGetResponse(
    BaseModel
):
    pass


class GiftcardprovidersGiftCardProviderIDGiftcardsGiftCardIDTransactionsTIdSettlementsPostResponse(
    BaseModel
):
    pass


class GiftcardprovidersGiftCardProviderIDGiftcardsGiftCardIDTransactionsTransactionIDGetResponse(
    BaseModel
):
    pass


class GiftcardprovidersGiftCardProviderIDGiftcardsGiftCardIDTransactionsTransactionIDAuthorizationGetResponse(
    BaseModel
):
    pass


class GiftcardprovidersGiftCardProviderIdGetResponse(BaseModel):
    pass


class Cart(BaseModel):
    discounts: int
    grandTotal: int
    items: List[Item] = Field(..., description='')
    itemsTotal: int
    redemptionCode: str
    relationName: str
    shipping: int
    taxes: int


class Cart1(BaseModel):
    discounts: int
    grandTotal: int
    items: List[Item1] = Field(..., description='')
    itemsTotal: int
    shipping: int
    taxes: int


class Cart2(BaseModel):
    discounts: int
    grandTotal: int
    items: List[Item] = Field(..., description='')
    itemsTotal: int
    redemptionCode: str
    relationName: str
    shipping: int
    taxes: int


class CreateGiftCardSettlementTransactionRequest(BaseModel):
    cart: Cart2
    client: Client


class GetGiftCardfromGiftCardProviderRequest(BaseModel):
    cart: Cart
    client: Client


class OrderInfo(BaseModel):
    cart: Cart1
    clientProfile: ClientProfile
    orderId: str
    sequence: int
    shipping: Shipping


class CreateGiftCardTransactionRequest(BaseModel):
    description: str
    operation: str
    orderInfo: OrderInfo
    redemptionCode: str
    redemptionToken: str
    requestId: str
    value: float
