# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T11:54:32+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Header, Path

from models import (
    CreateGiftCardCancellationTransactionRequest,
    CreateGiftCardinGiftCardProviderRequest,
    CreateGiftCardTransactionRequest,
    CreateUpdateGiftCardProviderbyIDRequest,
    GetGiftCardfromGiftCardProviderRequest,
    GiftcardprovidersGetResponse,
    GiftcardprovidersGiftCardProviderIDDeleteResponse,
    GiftcardprovidersGiftCardProviderIdGetResponse,
    GiftcardprovidersGiftCardProviderIDGiftcardsGiftCardIDGetResponse,
    GiftcardprovidersGiftCardProviderIDGiftcardsGiftCardIDTransactionsGetResponse,
    GiftcardprovidersGiftCardProviderIDGiftcardsGiftCardIDTransactionsPostResponse,
    GiftcardprovidersGiftCardProviderIDGiftcardsGiftCardIDTransactionsTIdCancellationsGetResponse,
    GiftcardprovidersGiftCardProviderIDGiftcardsGiftCardIDTransactionsTIdCancellationsPostResponse,
    GiftcardprovidersGiftCardProviderIDGiftcardsGiftCardIDTransactionsTIdSettlementsGetResponse,
    GiftcardprovidersGiftCardProviderIDGiftcardsGiftCardIDTransactionsTIdSettlementsPostResponse,
    GiftcardprovidersGiftCardProviderIDGiftcardsGiftCardIDTransactionsTransactionIDAuthorizationGetResponse,
    GiftcardprovidersGiftCardProviderIDGiftcardsGiftCardIDTransactionsTransactionIDGetResponse,
    GiftcardprovidersGiftCardProviderIDGiftcardsPostResponse,
    GiftcardprovidersGiftCardProviderIDGiftcardsSearchPostResponse,
    GiftcardprovidersGiftCardProviderIDPutResponse,
)

app = MCPProxy(
    contact={},
    description=">ℹ️ Check the new [Payments onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.\r\n\r\nThe Gift Card Hub API allows interactions with all Gift Card providers registered to a store from a single point.\r\n\r\nGift Card providers are systems capable of providing cards to be used in the buying process.\r\n\r\nThe following is the sequence diagram that represents calls in the purchase closing process.\r\n![](https://cdn.jsdelivr.net/gh/vtexdocs/dev-portal-content@main/images/giftcard-hub-api-overview-0.png)\r\n\r\n**Checkout + Gateway**: Systems responsible for the sale and for processing orders and payments.\r\n\r\n**Gift Card Hub**: System responsible for managing multiple registered Gift Card providers for a store.\r\n\r\n**Gift Card Provider**: System responsible for providing the Gift Cards available to the user not closing a purchase. This system can be implemented by third parties.",
    title='GiftCard Hub API',
    version='1.0',
    servers=[
        {'url': 'https://vtex.local'},
        {
            'description': 'VTEX server url',
            'url': 'https://{accountName}.{environment}.com.br/api',
            'variables': {
                'accountName': {
                    'default': '{accountName}',
                    'description': 'Name of the VTEX account. Used as part of the URL',
                },
                'environment': {
                    'default': '{environment}',
                    'description': 'Environment to use. Used as part of the URL.',
                },
            },
        },
    ],
)


@app.get(
    '/giftcardproviders',
    description=""" Returns a collection of giftcard providers from a store. """,
    tags=['gift_card_provider_management'],
)
def list_all_gift_card_providers(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    r_e_s_t__range: Optional[str] = Header('resources=0-49', alias='REST-Range'),
    x__v_t_e_x__a_p_i__app_key: str = Header(..., alias='X-VTEX-API-AppKey'),
    x__v_t_e_x__a_p_i__app_token: str = Header(..., alias='X-VTEX-API-AppToken'),
):
    """
    List All GiftCard Providers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/giftcardproviders/{giftCardProviderID}',
    description=""" Delete a giftcard provider from a store. """,
    tags=['gift_card_provider_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def delete_gift_card_providerby_i_d(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    x__v_t_e_x__a_p_i__app_key: str = Header(..., alias='X-VTEX-API-AppKey'),
    x__v_t_e_x__a_p_i__app_token: str = Header(..., alias='X-VTEX-API-AppToken'),
    gift_card_provider_i_d: str = Path(..., alias='giftCardProviderID'),
):
    """
    Delete GiftCard Provider by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/giftcardproviders/{giftCardProviderID}',
    description=""" Create or update a giftcard provider from a store. """,
    tags=['gift_card_provider_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def create__update_gift_card_providerby_i_d(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    x__v_t_e_x__a_p_i__app_key: str = Header(..., alias='X-VTEX-API-AppKey'),
    x__v_t_e_x__a_p_i__app_token: str = Header(..., alias='X-VTEX-API-AppToken'),
    gift_card_provider_i_d: str = Path(..., alias='giftCardProviderID'),
    body: CreateUpdateGiftCardProviderbyIDRequest = ...,
):
    """
    Create/Update GiftCard Provider by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/giftcardproviders/{giftCardProviderID}/giftcards',
    description=""" Creates a giftcard in a giftcard provider. """,
    tags=['gift_card_provider_management', 'gift_card_operations'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def create_gift_cardin_gift_card_provider(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    x__v_t_e_x__a_p_i__app_key: str = Header(..., alias='X-VTEX-API-AppKey'),
    x__v_t_e_x__a_p_i__app_token: str = Header(..., alias='X-VTEX-API-AppToken'),
    gift_card_provider_i_d: str = Path(..., alias='giftCardProviderID'),
    body: CreateGiftCardinGiftCardProviderRequest = ...,
):
    """
    Create GiftCard in GiftCard Provider
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/giftcardproviders/{giftCardProviderID}/giftcards/_search',
    description=""" Returns all giftcards from a giftcard provider according to the filters. """,
    tags=['gift_card_provider_management', 'gift_card_operations'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_gift_cardfrom_gift_card_provider(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    x__v_t_e_x__a_p_i__app_key: str = Header(..., alias='X-VTEX-API-AppKey'),
    x__v_t_e_x__a_p_i__app_token: str = Header(..., alias='X-VTEX-API-AppToken'),
    r_e_s_t__range: str = Header(..., alias='REST-Range'),
    gift_card_provider_i_d: str = Path(..., alias='giftCardProviderID'),
    body: GetGiftCardfromGiftCardProviderRequest = ...,
):
    """
    Get GiftCard from GiftCard Provider
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/giftcardproviders/{giftCardProviderID}/giftcards/{giftCardID}',
    description=""" Returns a specific giftcard from a giftcard provider. """,
    tags=['gift_card_provider_management', 'gift_card_operations'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_gift_cardfrom_gift_card_providerby_i_d(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    x__v_t_e_x__a_p_i__app_key: str = Header(..., alias='X-VTEX-API-AppKey'),
    x__v_t_e_x__a_p_i__app_token: str = Header(..., alias='X-VTEX-API-AppToken'),
    gift_card_provider_i_d: str = Path(..., alias='giftCardProviderID'),
    gift_card_i_d: str = Path(..., alias='giftCardID'),
):
    """
    Get GiftCard from GiftCard Provider by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/giftcardproviders/{giftCardProviderID}/giftcards/{giftCardID}/transactions',
    description=""" Return all transaction from a giftcard. """,
    tags=['gift_card_transaction_management', 'gift_card_operations'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def list_all_gift_card_transactions(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    x__v_t_e_x__a_p_i__app_key: str = Header(..., alias='X-VTEX-API-AppKey'),
    x__v_t_e_x__a_p_i__app_token: str = Header(..., alias='X-VTEX-API-AppToken'),
    gift_card_provider_i_d: str = Path(..., alias='giftCardProviderID'),
    gift_card_i_d: str = Path(..., alias='giftCardID'),
):
    """
    List All GiftCard Transactions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/giftcardproviders/{giftCardProviderID}/giftcards/{giftCardID}/transactions',
    description=""" Creates a transaction to a giftcard. """,
    tags=['gift_card_operations', 'gift_card_transaction_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def create_gift_card_transaction(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    x__v_t_e_x__a_p_i__app_key: str = Header(..., alias='X-VTEX-API-AppKey'),
    x__v_t_e_x__a_p_i__app_token: str = Header(..., alias='X-VTEX-API-AppToken'),
    gift_card_provider_i_d: str = Path(..., alias='giftCardProviderID'),
    gift_card_i_d: str = Path(..., alias='giftCardID'),
    body: CreateGiftCardTransactionRequest = ...,
):
    """
    Create GiftCard Transaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/giftcardproviders/{giftCardProviderID}/giftcards/{giftCardID}/transactions/{tId}/cancellations',
    description=""" Returns a collection of cancellation transactions from a giftcard. """,
    tags=['gift_card_transaction_management', 'gift_card_operations'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def list_all_gift_card_cancellation_transactions(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    x__v_t_e_x__a_p_i__app_key: str = Header(..., alias='X-VTEX-API-AppKey'),
    x__v_t_e_x__a_p_i__app_token: str = Header(..., alias='X-VTEX-API-AppToken'),
    gift_card_provider_i_d: str = Path(..., alias='giftCardProviderID'),
    gift_card_i_d: str = Path(..., alias='giftCardID'),
    t_id: str = Path(..., alias='tId'),
):
    """
    List All GiftCard Cancellation Transactions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/giftcardproviders/{giftCardProviderID}/giftcards/{giftCardID}/transactions/{tId}/cancellations',
    description=""" Creates a cancellation transaction to a giftcard. """,
    tags=['gift_card_transaction_management', 'gift_card_operations'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def create_gift_card_cancellation_transaction(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    x__v_t_e_x__a_p_i__app_key: str = Header(..., alias='X-VTEX-API-AppKey'),
    x__v_t_e_x__a_p_i__app_token: str = Header(..., alias='X-VTEX-API-AppToken'),
    gift_card_provider_i_d: str = Path(..., alias='giftCardProviderID'),
    gift_card_i_d: str = Path(..., alias='giftCardID'),
    t_id: str = Path(..., alias='tId'),
    body: CreateGiftCardCancellationTransactionRequest = ...,
):
    """
    Create GiftCard Cancellation Transaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/giftcardproviders/{giftCardProviderID}/giftcards/{giftCardID}/transactions/{tId}/settlements',
    description=""" Returns a collection of settlement transactions from a giftcard. """,
    tags=['gift_card_transaction_management', 'gift_card_operations'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def list_all_gift_card_settlement_transactions(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    x__v_t_e_x__a_p_i__app_key: str = Header(..., alias='X-VTEX-API-AppKey'),
    x__v_t_e_x__a_p_i__app_token: str = Header(..., alias='X-VTEX-API-AppToken'),
    gift_card_provider_i_d: str = Path(..., alias='giftCardProviderID'),
    gift_card_i_d: str = Path(..., alias='giftCardID'),
    t_id: str = Path(..., alias='tId'),
):
    """
    List All GiftCard Settlement Transactions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/giftcardproviders/{giftCardProviderID}/giftcards/{giftCardID}/transactions/{tId}/settlements',
    description=""" Creates a settlement transaction to a giftcard. """,
    tags=['gift_card_transaction_management', 'gift_card_operations'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def create_gift_card_settlement_transaction(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    gift_card_provider_i_d: str = Path(..., alias='giftCardProviderID'),
    gift_card_i_d: str = Path(..., alias='giftCardID'),
    t_id: str = Path(..., alias='tId'),
):
    """
    Create GiftCard Settlement Transaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/giftcardproviders/{giftCardProviderID}/giftcards/{giftCardID}/transactions/{transactionID}',
    description=""" Returns a specific transaction from a giftcard. """,
    tags=['gift_card_transaction_management', 'gift_card_operations'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_gift_card_transactionby_i_d(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    x__v_t_e_x__a_p_i__app_key: str = Header(..., alias='X-VTEX-API-AppKey'),
    x__v_t_e_x__a_p_i__app_token: str = Header(..., alias='X-VTEX-API-AppToken'),
    gift_card_provider_i_d: str = Path(..., alias='giftCardProviderID'),
    gift_card_i_d: str = Path(..., alias='giftCardID'),
    transaction_i_d: str = Path(..., alias='transactionID'),
):
    """
    Get GiftCard Transaction by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/giftcardproviders/{giftCardProviderID}/giftcards/{giftCardID}/transactions/{transactionID}/authorization',
    description=""" Returns the transaction authorization info. """,
    tags=['gift_card_operations', 'gift_card_transaction_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_gift_card_authorization_transaction(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    x__v_t_e_x__a_p_i__app_key: str = Header(..., alias='X-VTEX-API-AppKey'),
    x__v_t_e_x__a_p_i__app_token: str = Header(..., alias='X-VTEX-API-AppToken'),
    gift_card_provider_i_d: str = Path(..., alias='giftCardProviderID'),
    gift_card_i_d: str = Path(..., alias='giftCardID'),
    transaction_i_d: str = Path(..., alias='transactionID'),
):
    """
    Get GiftCard Authorization Transaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/giftcardproviders/{giftCardProviderId}',
    description=""" Returns a giftcard provider from a store. """,
    tags=['gift_card_provider_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_gift_card_providerby_i_d(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    x__v_t_e_x__a_p_i__app_key: str = Header(..., alias='X-VTEX-API-AppKey'),
    x__v_t_e_x__a_p_i__app_token: str = Header(..., alias='X-VTEX-API-AppToken'),
    gift_card_provider_id: str = Path(..., alias='giftCardProviderId'),
):
    """
    Get GiftCard Provider by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
